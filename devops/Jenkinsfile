def dirsToBuild = null

pipeline {
    agent any

    environment {
        NEXUS_CREDENTIALS_ID = 'nexus-id' // ID of your stored Nexus credentials
        NEXUS_URL = 'nexus:8081' // Replace with your Nexus URL
        REPO_NAME = 'maven-snapshots' // Replace with your Nexus repository name
    }

    tools {
            // Specify the Gradle version configured in Jenkins
            gradle 'gradle'
        }
options {
    gitLabConnection('GitLabStud')
}
    stages {
        stage('Clean Workspace') {
            steps {
                echo 'test'
                updateGitlabCommitStatus name: 'build', state: 'pending'
            }
        }
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Detect Changes') {
            steps {
                script {
                    def checkChanges = load 'devops/jenkins/checkChanges.groovy'

                    def changedDirs = checkChanges.getChangedDirectories()
                    println "Changed Microservices: ${changedDirs.join(', ')}"

                    dirsToBuild = checkChanges.getDirectoriesWithGradlew(changedDirs)
                    println "Microservices with gradlew (to build): ${dirsToBuild.join(', ')}"

                    // Use dirsToBuild for further steps to build these microservices
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    def buildSteps = [:] // Creating an empty map for parallel steps

                    // Populate the buildSteps map with parallel tasks
                    dirsToBuild.each { dirName ->
                        buildSteps[dirName] = { // Use directory name as the key for the map
                            dir(dirName) {
                                sh './gradlew build'
                            }
                        }
                    }

                    // Run the build steps in parallel
                    parallel buildSteps
                }
            }
        }

        stage('Test') {
            steps {
                dir('hello-world'){
                sh './gradlew test'
                }

            }
        }

        stage('Upload to Nexus') {
            steps {
                dir('hello-world/build/libs'){
                script {
                    // Upload the JAR file to Nexus
                    nexusArtifactUploader(
                        nexusVersion: 'nexus3',
                        protocol: 'http',
                        nexusUrl: NEXUS_URL,
                        groupId: 'com.example',
                        version: '0.0.1-SNAPSHOT',
                        repository: REPO_NAME,
                        credentialsId: NEXUS_CREDENTIALS_ID,
                        artifacts: [
                            [artifactId: 'myapp',
                            classifier: '',
                            file: 'hello-world-0.0.1-SNAPSHOT.jar',
                            type: 'jar']
                        ]
                    )
                }

                }

            }
        }
    }
    post {
       success {
           updateGitlabCommitStatus name: 'build', state: 'success'
       }

       failure {

            updateGitlabCommitStatus name: 'build', state: 'failed'
        }
   }
}