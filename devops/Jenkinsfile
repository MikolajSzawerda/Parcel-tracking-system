def dirsToBuild = null
def dirstToNPMBuild = null
def dirsToDockerBuild = null

pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'my-spring-app'
        NEXUS_URL = '172.26.0.2:8084'
        NEXUS_CREDENTIALS_ID = 'nexus-id'
    }

    tools {
        gradle 'gradle'
    }
    options {
        gitLabConnection('AleToTyDzwoniszGitLab')
    }
    stages {
        stage('Checkout') {
            steps{
                checkout scm
                updateGitlabCommitStatus name: 'build', state: 'pending'
            }
        }

        stage('Detect Changes') {
            steps {
                script {
                    def checkChanges = load 'devops/jenkins/checkChanges.groovy'

                    def changedDirs = checkChanges.getChangedDirectories()
                    println "Changed Microservices: ${changedDirs.join(', ')}"

                    dirsToBuild = checkChanges.getDirectoriesWithGradlew(changedDirs)
                    println "Microservices with gradlew (to build): ${dirsToBuild.join(', ')}"
                    // Use dirsToBuild for further steps to build these microservices

                    dirsToDockerBuild = checkChanges.getDirectoriesWithDocker(changedDirs)
                    println "Microservices with docker (to build): ${dirsToDockerBuild.join(', ')}"

                    dirstToNPMBuild = checkChanges.getDirectoriesWithDocker(changedDirs)
                    println "Microservices with docker (to build): ${dirstToNPMBuild.join(', ')}"

                }
            }
        }

        stage('Build') {
            steps {
                script {
                    def buildSteps = [:] // Creating an empty map for parallel steps
                    // Populate the buildSteps map with parallel tasks
                    dirsToBuild.each { dirName ->
                        buildSteps[dirName] = { // Use directory name as the key for the map
                            dir(dirName) {
                                sh './gradlew clean'
                                sh './gradlew build'
                            }
                        }
                    }

                    // Run the build steps in parallel
                    parallel buildSteps
                }
            }
        }

        stage('Build docker image') {
            when {
                branch 'main'
            }
            steps {
                script{
                    dirsToDockerBuild.each { dirName ->
                        dir(dirName) {
                            env.dirName = dirName
                            sh "docker build -t ${dirName}:latest ."
                        }
                    }
                }
                

            }
        }
        stage('Push to Nexus') {
            when {
                branch 'main'
            }
            steps {
                script {
                    docker.withRegistry("http://${NEXUS_URL}", "${NEXUS_CREDENTIALS_ID}") {
                        dirsToDockerBuild.each { dirName ->
                            env.dirName = dirName
                            sh "docker tag ${dirName}:latest ${NEXUS_URL}/${dirName}:latest"
                            sh "docker push ${NEXUS_URL}/${dirName}:latest"
                        }
                    }
                }
            }
        }
        stage('Deploy') {
            when {
                branch 'main'
            }
            steps {
                script{
                    dirsToDockerBuild.each { dirName ->
                        dir(dirName) {
                            if(fileExists('deploy.yaml')){
                                sh 'docker-compose -f deploy.yaml pull'
                                sh 'docker-compose -f deploy.yaml down'
                                sh 'docker-compose -f deploy.yaml up -d'
                            }
                        }
                    }
                }

            }
        }
    }
    post {
       success {
           updateGitlabCommitStatus name: 'build', state: 'success'
       }

       failure {

            updateGitlabCommitStatus name: 'build', state: 'failed'
        }
   }
}
